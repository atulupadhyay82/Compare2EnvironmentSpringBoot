package com.thomsonreuters.entities;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.Month;
import javax.persistence.*;
import lombok.Builder;
import lombok.Data;




/**
 * ContentExtract table as a Hibernate entity class
 *
 *
 */
@Data
@Entity
@Table(name = "EX_CFG_EXTRACTS")
public class CFGExtract implements Serializable
{
    /**
     * UID generated by Intellij
     */
    private static final long serialVersionUID = 5768993068394846797L;


    /**
     * database ID of the extract (incremental)
     */
    @Id
    @Column(name = "EXTRACT_ID")
    private Long extractId;

    /**
     * key which references the company the extract is for
     */
    @Column(name = "COMPANY_KEY")
    private String companyKey;

    /**
     * name of the extract
     */
    @Column(name = "NAME")
    private String name;

    /**
     * rule to group by (authority, authority type, tax type)
     */
    @Column(name = "GROUPING_RULE")
    private String groupingRule;

    /**
     * boolean (Y or N) to include locations
     */
    @Column(name = "INCLUDE_LOCATIONS")
    private Boolean includeLocations;

    /**
     * boolean (Y or N) to include province
     */
    @Column(name = "INCLUDE_PROVINCE")
    private Boolean includeProvince;

    /**
     * boolean (Y or N) to include district
     */
    @Column(name = "INCLUDE_DISTRICT")
    private Boolean includeDistrict;

    /**
     * boolean (Y or N) to include states
     */
    @Column(name = "INCLUDE_STATE")
    private Boolean includeState;

    /**
     * boolean (Y or N) to include county
     */
    @Column(name = "INCLUDE_COUNTY")
    private Boolean includeCounty;

    /**
     * boolean (Y or N) to include city
     */
    @Column(name = "INCLUDE_CITY")
    private Boolean includeCity;

    /**
     * boolean (Y or N) to include postal
     */
    @Column(name = "INCLUDE_POSTAL")
    private Boolean includePostal;

    /**
     * boolean (Y or N) to include postal4
     */
    @Column(name = "INCLUDE_POSTAL4")
    private Boolean includePostal4;

    /**
     * boolean (Y or N) to include ranges
     */
    @Column(name = "INCLUDE_RANGES")
    private Boolean includeRanges;

    /**
     * boolean (Y or N) to include stores
     */
    @Column(name = "INCLUDE_STORES")
    private Boolean includeStores;

    /**
     * boolean (Y or N) to include invoice description as display name
     */
    @Column(name = "INCLUDE_INVOICE_DESC")
    private Boolean includeInvoiceDesc;
    /**
     * indicates preference for rate of tax
     */
    @Column(name = "RATE_PREFERENCE")
    private String ratePreference;

    /**
     * key referencing the us established company for the extract
     */
    @Column(name = "US_ESTABLISHED_COMPANY_KEY")
    private String usEstablishedCompanyKey;

    /**
     * key referencing the intl established company for the extract
     */
    @Column(name = "INTL_ESTABLISHED_COMPANY_KEY")
    private String intlEstablishedCompanyKey;

    /**
     * date at which the extract was added to the database
     */
    @Column(name = "CREATION_DATE")
    private LocalDateTime creationDate;

    /**
     * date at which the extract was last updated in the database
     */
    @Column(name = "LAST_UPDATE_DATE")
    private LocalDateTime lastUpdateDate;

    /**
     * Earliest date/time for which extract data is desired
     * Defaults to the earliest data date/time.
     */
    @Builder.Default
    @Column(name = "CONTENT_BEGIN_DATE")
    private LocalDateTime contentBeginDate;

    /**
     * database ID of the user who created the extract
     */
    @Column(name = "CREATED_BY")
    private String createdBy;

    /**
     * database ID of the user who last updated the extract
     */
    @Column(name = "LAST_UPDATED_BY")
    private String lastUpdatedBy;

    /**
     * date at which the extract was synchronized in the database
     */
    @Column(name = "SYNCHRONIZATION_TIMESTAMP")
    private LocalDateTime synchronizationTimestamp;

}
